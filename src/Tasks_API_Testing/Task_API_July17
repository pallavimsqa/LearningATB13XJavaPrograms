1.	Learn about what is a microservice.
A microservice is a small, independent service that does one thing well.
It works with other microservices to build a large, scalable, and flexible system.
Microservice = A small, focused piece of a big system.
Imagine an app like Amazon. Instead of one big program that handles everything (search, payments, cart, user accounts), it's broken into independent services:
‚Ä¢	Search Service
‚Ä¢	Payment Service
‚Ä¢	User Service
‚Ä¢	Cart Service
‚Ä¢	Shipping Service
Each microservice is:
‚Ä¢	Built and deployed independently
‚Ä¢	Communicates via APIs (usually HTTP, gRPC, or messaging queues)
‚Ä¢	Owned by a separate team
‚Ä¢	Loosely coupled and highly cohesive
Key Characteristics of Microservices
Characteristic	Description
‚úÖ Independently Deployable	You can update one service without touching others
‚úÖ Single Responsibility	Each service does one thing well
‚úÖ Technology-Agnostic	Services can use different languages or databases
‚úÖ Scalable	Scale only the services that need it (e.g., search)
‚úÖ Resilient	Failure in one service doesn‚Äôt crash the whole app
‚úÖ API-Based Communication	Services talk over REST, gRPC, messaging, etc.
How They Communicate
Microservices typically use:
‚Ä¢	REST APIs / HTTP
‚Ä¢	gRPC
‚Ä¢	Message brokers like Kafka, RabbitMQ
‚Ä¢	Event-driven communication
How They Communicate
Microservices typically use:
‚Ä¢	REST APIs / HTTP
‚Ä¢	gRPC
‚Ä¢	Message brokers like Kafka, RabbitMQ
‚Ä¢	Event-driven communication
-----------------------------------------------------------------------------------------------------------
2.	About what is a web service.
A web service is a software system that allows two machines or applications to communicate over the web (usually the Internet) using standard protocols like HTTP.
Or
A web service is a way for two devices or apps to talk to each other over the internet using standard web protocols like HTTP and data formats like JSON or XML.
A web service is like a middleman that lets different apps talk to each other using the internet.
For example:
‚Ä¢	Your weather app calls a weather web service to get today's forecast.
‚Ä¢	An online store may use a payment gateway web service to process credit cards.

Key Features of a Web Service:
Feature	Description
üì° Accessible via Web	Uses HTTP/HTTPS for communication
üí¨ Uses Standard Formats	Data is exchanged in XML or JSON
üîÅ Machine-to-Machine	Built for system-to-system communication
üåê Language-Independent	Works across different programming languages

Common Types of Web Services
Type	Description	Example
SOAP	XML-based, strict rules, enterprise use	Banking systems
REST	Lightweight, uses HTTP verbs, JSON or XML	Most modern APIs
XML-RPC / JSON-RPC	Remote procedure calls using XML/JSON	Older web apps

How a Web Service Works (Basic Flow):
1.	Client (App) sends a request to the Web Service (URL).
2.	The Web Service processes the request (e.g., gets data from a database).
3.	It returns a response (usually in JSON or XML) to the client.


Web Service vs API
Aspect	Web Service	API
Access	Over a network (usually HTTP)	Broader term (includes web services)
Format	XML/JSON (SOAP or REST)	Any format or protocol
Scope	A type of API that runs on the web	Includes libraries, SDKs, web services
üß† All web services are APIs, but not all APIs are web services.


3.	What is Cookies?
Cookies are small pieces of data that a website stores in your browser to remember information about you or your visit.
Or
A cookie is like a note a website gives to your browser to remember who you are and what you did last time.
Why Are Cookies Used?
Purpose	Example
üîê Authentication	Keep you logged in without asking for your password every time
üõí Session tracking	Remember items in your shopping cart
üéØ Personalization	Save preferences like language or theme
üìä Analytics & Ads	Track user behavior for stats or targeted ads
How Cookies Work (Step by Step):
1.	You visit a website (e.g., amazon.com).
2.	The site sends a cookie to your browser with data (like session_id=abc123).
3.	Your browser stores it.
4.	On future visits, your browser sends that cookie back with every request to that site.
5.	The server reads it to identify you or retrieve your preferences.

Types of Cookies
Type	Description
Session Cookie	Temporary, deleted when you close your browser
Persistent Cookie	Stays until expiration date (or manually deleted)
Secure Cookie	Only sent over HTTPS
HttpOnly Cookie	Not accessible via JavaScript (helps prevent XSS)
Third-party Cookie	Set by other domains (often for ads or tracking)

Are Cookies Bad?
Not always! But they can be misused:
‚Ä¢	For tracking across websites (by advertisers)
‚Ä¢	For data collection without consent
That's why laws like GDPR and CCPA require websites to get your cookie consent.
Cookies are small data files stored in your browser by websites to remember things like login status, preferences, and activities.
---------------------------------------------------------------------------------------------------------------
4.	What is Server?
A server is a computer or system that provides data, services, or resources to other computers‚Äîcalled clients‚Äîover a network.
How It Works:
1.	A client (like your browser or app) sends a request.
2.	The server receives it, processes it, and sends a response back.
For example:
‚Ä¢	You type google.com
‚Ä¢	Your browser (client) sends a request
‚Ä¢	Google's web server sends back the web page
 Types of Servers
Server Type	What It Does	Example
üåê Web Server	Serves websites	Apache, Nginx
üóÉÔ∏è File Server	Stores and shares files	Dropbox, NAS devices
üõ†Ô∏è Application Server	Runs app logic	Node.js, Tomcat
üß† Database Server	Stores and processes data	MySQL, MongoDB
‚úâÔ∏è Mail Server	Sends and receives emails	Microsoft Exchange
üïπÔ∏è Game Server	Hosts multiplayer games	Fortnite server
üì° Proxy Server	Acts as an intermediary	VPNs, corporate firewalls
Server in a Network
Servers can live:
‚Ä¢	On the Internet (public servers like Google)
‚Ä¢	On a local network (private servers for businesses)
‚Ä¢	In the cloud (AWS, Azure, etc.)
A server is a computer or system that responds to requests and provides services like websites, data, files, or emails to clients over a network.
-----------------------------------------------------------------------------------------------------
5.	What is LocalHost
Localhost refers to your own computer‚Äîit's a special network address used to communicate with yourself.
‚Ä¢	IP Address of localhost: 127.0.0.1
‚Ä¢	Hostname: localhost
In Simple Terms:
Think of localhost as saying:
"Talk to myself on my own machine."
So, when you type http://localhost into your browser, you're asking your computer to connect to a server running on itself.
What Is It Used For?
Use Case	Example
üîß Web development	Run and test websites locally before deploying online
üõ†Ô∏è Software testing	Run apps without internet connection
üóÇÔ∏è Database hosting	Access a local MySQL/PostgreSQL database
üß™ API testing	Test REST or GraphQL APIs in development
Localhost = Loopback Address
‚Ä¢	127.0.0.1 is the standard IPv4 address for localhost.
‚Ä¢	It‚Äôs called a loopback address because it loops back to your own machine.
Localhost is your own computer. It‚Äôs used to run and test apps locally without needing the interne
6.	What is Domain?
A domain is the human-friendly name used to access websites on the internet.
It‚Äôs what you type into your browser to go to a site, like: google.com , facebook.com , openai.com
Instead of typing an IP address (like 142.250.190.78), you use a domain name (like google.com)‚Äîwhich is easier to remember.
 Domain = web address
Ex: https://www.example.com

This domain is linked to a server IP address using something called DNS (Domain Name System), so you can reach the correct website.
Parts of a Domain
Let's look at this domain:
www.openai.com
Part	Name	Description
www	Subdomain	Optional; indicates the specific part of the site
openai	Second-Level Domain (SLD)	Main name of the website
.com	Top-Level Domain (TLD)	Type of website or organization (.com, .org, .net, etc.)
Common Top-Level Domains (TLDs)
TLD	Meaning
.com	Commercial/business sites
.org	Organizations/non-profits
.net	Networks/services
.edu	Education (schools, universities)
.gov	Government sites
.io, .ai	Tech startups and services
Why Domains Are Important
‚Ä¢	Easier for humans to remember than IP addresses
‚Ä¢	Essential for building a brand or website
‚Ä¢	Used for email addresses too (e.g., user@example.com)
How Domains Work (Simple Flow)
1.	You type example.com into your browser.
2.	Your browser uses DNS to find the IP address for that domain.
3.	It connects to the server at that IP.
4.	The website loads.
A domain is a website‚Äôs name (like google.com) that points to a server‚Äôs IP address, making it easy to find and access websites online.
------------------------------------------------------------------------------------------------------
7.	what is Endpoint in the URL?
An endpoint is the specific part of a URL that refers to a particular resource or function in a web service or API.

Endpoints Are Used in APIs (Especially REST APIs)
HTTP Method	Endpoint	What It Does
GET	/users	Get all users
GET	/users/5	Get user with ID 5
POST	/users	Create a new user
PUT	/users/5	Update user with ID 5
DELETE	/users/5	Delete user with ID 5
Each of these is a different endpoint, even if they share the same base path.
An endpoint is the path in a URL that targets a specific resource or action on a server, usually used in APIs.
----------------------------------------------------------------------------------
8.	What is the Difference between HTTP and HTTPS?
Feature	HTTP	HTTPS
üîí Security	‚ùå Not secure	‚úÖ Secure (uses encryption)
üîê Encryption	‚ùå None ‚Äî data is sent in plain text	‚úÖ Data is encrypted using SSL/TLS
üÜî URL Prefix	http://	https://
üîè Uses Certificate?	‚ùå No	‚úÖ Yes (SSL/TLS certificate required)
‚úÖ Trust Indicator	‚ùå Often marked "Not secure"	‚úÖ Shows a padlock icon in browser
üîÅ Port Used	Port 80	Port 443
üß™ Use Case	OK for public/non-sensitive info	Required for login, payments, etc.
Why HTTPS Is Better:
‚Ä¢	Protects sensitive info (like passwords, credit cards)
‚Ä¢	Prevents man-in-the-middle attacks
‚Ä¢	Improves SEO ranking (Google prefers HTTPS)
‚Ä¢	Builds user trust with the padlock icon in the address bar
HTTP is basic and not secure.
HTTPS is secure, encrypted, and the standard for modern websites
-----------------------------------------------------------------------------------------------------------

9.	What is CRUD? and which methods are used for this and give some details about those methods.
CRUD stands for the four basic operations used to manage data in databases or web applications, Rest APIs:
C ‚Äì create ‚Äì POST method to create new data
R ‚Äì read ‚Äì GET method to retrieve data
U ‚Äì update ‚Äì PUT  method to update/replaces entire resource & PATCH method to update partial        resource
D ‚Äì Delete  - DELETE method to delete resource on the server

CRUD stands for Create, Read, Update, Delete ‚Äî the 4 main ways we interact with data.
In REST APIs, CRUD is handled using HTTP methods: POST, GET, PUT/PATCH, and DELETE.
---------------------------------------------------------------------------------------------------------------
10.	What is Payload, Header, Status code?
The payload is the actual data sent in the body of an HTTP request or response.
Headers are key-value pairs that carry metadata about the HTTP request or response.
They provide instructions or information like:
‚Ä¢	What kind of data is being sent (Content-Type)
‚Ä¢	Authorization tokens
‚Ä¢	Cache settings
‚Ä¢	Language preferences
Headers do not contain the main data‚Äîthey describe it.
A status code is a 3-digit number sent in the HTTP response that tells you the result of your request.


------------------------------------------------------------------------------------
11.	What is Load Balancer? (Research about this)
A Load Balancer is a system that distributes incoming network traffic across multiple servers to ensure:
‚Ä¢	No single server is overloaded
‚Ä¢	Faster performance
‚Ä¢	Higher availability and reliability


How It Works (Basic Flow)
1.	A user sends a request (e.g., visiting a website).
2.	The load balancer receives the request first.
3.	It checks which server is available and least busy.
4.	It forwards the request to that server.
5.	The server processes it and sends back the response.
A Load Balancer is like a traffic manager that spreads user requests across multiple servers so no one server gets overwhelmed, ensuring speed, reliability, and uptime.
12.	What is Client and Server?
A client is a device or application that sends a request to another machine (the server) to get some data or service
Examples:
‚Ä¢	Your web browser (Chrome, Firefox)
‚Ä¢	A mobile app (like Instagram)
‚Ä¢	Postman (API testing tool)
When you type google.com, your browser (client) sends a request to Google's server to load the page.
What is a Server?
A server is a computer or system that receives requests from clients and sends back responses.
It stores and provides:
‚Ä¢	Web pages
‚Ä¢	Data
‚Ä¢	Services (like login, search, payments, etc.)
Examples:
‚Ä¢	Web server (e.g. Google.com)
‚Ä¢	API server
‚Ä¢	Email server
‚Ä¢	Database server
Real Example
You visit https://example.com in your browser:
‚Ä¢	Client = Your browser
‚Ä¢	Server = example.com's web server
‚Ä¢	Request = GET /index.html
‚Ä¢	Response = HTML content of the homepage

A client is the one that asks for something (like a web page or data).
A server is the one that listens, processes, and delivers that something back.



